module trim (trim, readFASTQ, writeFASTA)

source Cpp from "trim.hpp" ("trimRead", "readFASTQ", "writeFASTA")

-- defines Int, Str, List and Tuple types
import types

import base (map, fst, snd)

record Config = Config
    { minLength :: Int
    , minQuality :: Int
    }
record Cpp => Config = "Config"

--' Read a FASTQ file
readFASTQ
    :: Str -- FASTQ filename
    -> [((Str, Str), Str)]


--' Write a annotated sequence data to a FASTA file
writeFASTA
    :: Str -- output filename
    -> [(Str,Str)] -- list of headers and sequences
    -> Int -- exit code, 0 for success, 1 for failure


--' Trim a single read
trimRead
    :: Config
    -> Str -- quality scores
    -> Str -- sequence
    -> Str -- trimmed sequence


--' Apply a trimmer function to a FASTQ entry
trimWrapper :: (   Str -- quality
                -> Str -- sequence
                -> Str -- trimmed sequence
               )
               -> ((Str, Str), Str)
               -> (Str,Str)
trimWrapper trimmer entry = (header, trimmer quality sequence)
    where
        header = (fst . fst) entry
        quality = (snd . fst) entry
        sequence = snd entry


--' Trim a list of reads with phred quality scores
trim :: Config -> [((Str, Str), Str)] -> [(Str,Str)]
trim config = map (trimWrapper (trimRead config))
